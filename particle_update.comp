#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticleBufferIn {
    vec4 particlesIn[];
};

layout(std430, binding = 1) buffer ParticleBufferOut {
    vec4 particlesOut[];
};

// Input uniforms
uniform vec2 mousePosition;
uniform float deltaTime;
uniform vec2 iResolution;

// Adjustable parameters
uniform float attractionStrength = 2.0;
uniform float maxAcceleration = 5.0;
uniform float velocityDamping = 0.999;
uniform float bounceCoefficient = 0.8;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= particlesIn.length()) return;
    
    vec2 position = particlesIn[gid].xy;
    vec2 velocity = particlesIn[gid].zw;
    
    vec2 normalizedMouse = (mousePosition / iResolution) * 2.0 - 1.0;
    
    vec2 direction = normalizedMouse - position;
    float distance = length(direction);
    vec2 acceleration = normalize(direction) * min(attractionStrength / (distance * distance + 0.1), maxAcceleration);
    
    velocity += acceleration * deltaTime;
    velocity *= velocityDamping;
    position += velocity * deltaTime;
    
    if (abs(position.x) > 1.0) {
        position.x = sign(position.x) * 1.0;
        velocity.x *= -bounceCoefficient;
    }
    if (abs(position.y) > 1.0) {
        position.y = sign(position.y) * 1.0;
        velocity.y *= -bounceCoefficient;
    }
    
    particlesOut[gid] = vec4(position, velocity);
}