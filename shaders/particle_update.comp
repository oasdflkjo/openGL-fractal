#version 430

// Parameters for easy tweaking
#define ATTRACTION_STRENGTH 1000.0
#define DRAG_COEFFICIENT 0.1
//#define TUNNEL_STRENGTH 1.0

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer ParticleIn {
    vec4 particlesIn[];
};

layout(std430, binding = 1) buffer ParticleOut {
    vec4 particlesOut[];
};

uniform vec2 mousePosition;
uniform float deltaTime;
uniform vec2 iResolution;
uniform float randomSeed;
uniform float time;

// Hash function for pseudo-random number generation
float hash(float n) {
    return fract(sin(n) * 43758.5453);
}

// 2D hash function
vec2 hash2(vec2 p) {
    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if(gid >= particlesIn.length()) return;

    vec2 pos = particlesIn[gid].xy;
    vec2 vel = particlesIn[gid].zw;

    // Update velocity (attract to mouse)
    vec2 toMouse = mousePosition - pos;
    vel += normalize(toMouse) * deltaTime * ATTRACTION_STRENGTH;

    // Apply drag force
    vel -= vel * DRAG_COEFFICIENT * deltaTime;

    // Update position
    pos += vel * deltaTime;

    // Apply random tunneling effect
    //vec2 noise = hash2(pos + vec2(time, randomSeed));
    //pos += noise * TUNNEL_STRENGTH;

    particlesOut[gid] = vec4(pos, vel);
}