#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) buffer ParticleBuffer {
    vec4 particles[];
};

layout(r32f, binding = 2) uniform image2D densityMap;

uniform vec2 mousePosition;
uniform float deltaTime;
uniform vec2 iResolution;

// Global parameters for easy tweaking
uniform float bounceFactor = 1.0; // Factor for bouncing off edges
uniform float mouseInfluenceStrength = 5000.0; // Strength of mouse influence
uniform float maxSpeed = 5000.0; // Maximum speed of particles

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= particles.length()) return;

    vec2 pos = particles[gid].xy;
    vec2 vel = particles[gid].zw;

    // Update position
    pos += vel * deltaTime;

    // Bounce off edges
    if (pos.x < 0 || pos.x > iResolution.x) vel.x *= -bounceFactor;
    if (pos.y < 0 || pos.y > iResolution.y) vel.y *= -bounceFactor;

    // Clamp position to screen
    pos = clamp(pos, vec2(0), iResolution);

    // Apply mouse influence
    vec2 toMouse = mousePosition - pos;
    float distToMouse = length(toMouse);
    if (distToMouse > 0) {
        vec2 mouseForce = normalize(toMouse) * mouseInfluenceStrength / (distToMouse + 10.0);
        vel += mouseForce * deltaTime;
    }

    // Limit velocity
    if (length(vel) > maxSpeed) {
        vel = normalize(vel) * maxSpeed;
    }

    // Update particle
    particles[gid] = vec4(pos, vel);

    // Update density map
    ivec2 pixelCoords = ivec2(pos);
    float currentDensity = imageLoad(densityMap, pixelCoords).r;
    imageStore(densityMap, pixelCoords, vec4(currentDensity + 0.1, 0.0, 0.0, 0.0));
}